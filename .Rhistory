knitr::opts_chunk$set(echo = TRUE)
#Importar librerías
library(lubridate)
library(tseries)
library(lubridate)
library(tidyverse)
library(openxlsx)
library(car)
library(astsa)
library(foreign)
library(timsac)
library(vars)
library(lmtest)
library(mFilter)
library(dynlm)
library(nlme)
library(lmtest)
library(broom)
library(kableExtra)
library(knitr)
library(MASS)
library(parallel)
library(mlogit)
library(dplyr)
library(tidyr)
library(forecast)
library(fpp2)
library(stats)
library(quantmod)
library(utf8)
#Importar datos
Arimar<-read.xlsx("C:/Users/Leobardo/Documents/GitHub/TimeSeries/Arimar.xlsx")
View(Arimar)
#Paso 1. Convertir a objeto de Serie de Tiempo en R
Arimar.ts=ts(Arimar, start=c(2013,1), frequency = 12)
plot(Arimar.ts,  main="Evolución de los precios internacionales del barril de petróleo", ylab="Precio en dólares por barril", xlab="Tiempo", col="red")
serielog=log(Arimar.ts)
plot(serielog, main="Evolución de los precios internacionales del barril de petróleo", ylab="Precio por barril en logaritmos", col="blue")
#Estacionariedad: Para conocer el número de diferencias que se requieren para lograr que la serie
#sea estacionaria
ndiffs(Arimar.ts, alpha = 0.05, test = c("kpss", "adf", "pp"), type = c("level", "trend"), max.d=2)
#Paso 2.Prueba de DickeyFuller
adf.test(Arimar.ts)
seriedif=diff(Arimar.ts)
plot(seriedif)
acf(seriedif)
ndiffs(seriedif)
ndiffs(seriedif)
adf.test(seriedif)
#Prueba de Dickey Fuller con dos diferencias
seriedif2=diff(Arimar.ts, differences =2)
plot(seriedif2)
#Prueba de Dickey Fuller con dos diferencias
adf.test(seriedif2)
#Paso 4: Analisis visual de las graficas
plot(seriedif2, type="o", lty="dashed",main="Serie diferenciada (dif=2)",col="red")
par(mfrow=c(2,1), mar=c(4,4,4,1)+.1)
acf(seriedif2)
pacf(seriedif2)
par(mfrow=c(2,1), mar=c(4,4,4,1)+.1)
acf(ts(seriedif2, frequency=1))
pacf(ts(seriedif2, frequency=1))
modelo1=arima(Arimar.ts,order=c(1,2,1))
summary(modelo1)
tsdiag(modelo1)
Box.test(residuals(modelo1),type="Ljung-Box")
error=residuals(modelo1)
plot(error)
#Pronosticos Arima
pronostico=forecast::forecast(modelo1,h=5)
pronostico
#Pronosticos Arima
plot(pronostico)
knitr::opts_chunk$set(echo = TRUE)
library("reshape2")
library("ggplot2")
library("lubridate")
library("dplyr")
bd<-read.csv("C:/Users/Leobardo/Documents/GitHub/TimeSeries/oil.csv")
sum<-(summary(bd))
sum
View(bd)
View(Arimar)
plot(bd$Price,  type="line", col="blue", lwd = 1, main="Oil price", xlab="Time", ylab="Price (Dollars)")
bd<-as.data.frame(bd)
bd$time <- ts(bd$Month, start=c(2017, 1), end=c(2023, 12), frequency=12)
bd$time<-as.numeric(time(bd$time))
ggplot(bd,aes(x=time, y=Price))+
geom_line(aes(x=time, y=Price),color="blue")+
geom_point(aes(x=time, y=Price.1),color="green")+
geom_point(aes(x=time, y=Forecast),color="red")+
geom_point(aes(x=time, y=Lower),color="yellow")+
geom_point(aes(x=time, y=Upper),color="purple")
View(bd)
bd<-as.data.frame(bd)
bd$time <- ts(bd$Month, start=c(2017, 1), end=c(2023, 12), frequency=12)
bd$time<-as.numeric(time(bd$time))
ggplot(bd,aes(x=time, y=Price))+
geom_line(aes(x=time, y=Price),color="blue")+
geom_line(aes(x=time, y=Price.1),color="green")+
geom_line(aes(x=time, y=Forecast),color="red")+
geom_line(aes(x=time, y=Lower),color="yellow")+
geom_line(aes(x=time, y=Upper),color="purple")
bd<-as.data.frame(bd)
bd$time <- ts(bd$Month, start=c(2017, 1), end=c(2023, 12), frequency=12)
bd$time<-as.numeric(time(bd$time))
ggplot(bd,aes(x=time, y=Price))+
geom_line(aes(x=time, y=Price),color="blue")+
geom_line(aes(x=time, y=Price.1),color="green")+
geom_line(aes(x=time, y=Forecast),color="red")+
geom_point(aes(x=time, y=Lower),color="yellow")+
geom_point(aes(x=time, y=Upper),color="purple")
